(def runtime-spec-version 100)
(def transaction-version 1)
(def sudo-index 7)
(def sudo-call 0)
(def protos-index 11)
(def add-upload-auth-index 0)
(def upload-index 2)
(def patch-index 3)
(def detach-index 6)

(defloop wait-port
  (Setup
   100 >= .tries)
  (Maybe (->
          {"id" 1 "jsonrpc" "2.0" "method" "wire_getShardHash" "params" [0]} (ToJson) (Http.Post .rpc-server)
          (FromJson) (ExpectTable) (Take "result") (ExpectString) (Log)
          (Stop))
         (->
          (Math.Dec .tries)
          (Pause 2.0)))
  .tries (Assert.IsNot 0)
  (Log "Waiting for port"))

(defchain make-calldata
  (| (Take 0) (ExpectInt) = .pallet-idx)
  (| (Take 1) (ExpectInt) = .call-idx)
  ; >= copy to allow nesting
  (| (Take 2) (ExpectBytes) >= .args)
  ; call payload to be signed
  ; [module-index call-index] (Check Metadata)
  [.pallet-idx .call-idx] (Substrate.Encode ["u8" "u8"]) >= .call-data
  .args (AppendTo .call-data)
  .call-data)

(defchain send-signed-extrinsic
  (| (Take 0) (ExpectString) = .private-key)
  (| (Take 1) (ExpectBytes) = .call-data)

  ; signer
  .private-key (Sr25519.PublicKey) (Substrate.AccountId) (Log) = .pub-key

  ; multiaddress enum
  [0 .pub-key] (Substrate.Encode ["u8" "a"]) = .signer

  ; account info 
  [.pub-key] (Substrate.Encode ["a"]) (ToHex) = .account-id-hex
  ["System" "Account" .account-id-hex] (Substrate.StorageMap) (ToHex) = .account-info-query
  {"id" 1 "jsonrpc" "2.0" "method" "state_getStorage" "params" [.account-info-query]} (ToJson) (Http.Post .rpc-server)
  (FromJson) (ExpectTable) (Take "result") (ExpectString) (HexToBytes)
  (Substrate.Decode [Type.Int] ["u32"]) (Take 0) = .nonce

  ; extra data to be signed
  ; [era nonce weight]
  ; use 0 u8 for era to have an immortal transaction
  [0 .nonce 0] (Substrate.Encode ["u8" "c" "c"]) = .extra-data

  ; TODO, this should be a CONSTANT actually
  {"id" 1 "jsonrpc" "2.0" "method" "wire_getShardHash" "params" [0]} (ToJson) (Http.Post .rpc-server)
  (FromJson) (ExpectTable) (Take "result") (ExpectString) (Log) (HexToBytes) (Log) = .node-genesis-hash

  ; additional data to be signed
  ; [runtime-spec-version transaction-version genesis-hash genesis-or-current-hash]
  [runtime-spec-version transaction-version] (Substrate.Encode ["u32" "u32"]) >= .additional-data
  .node-genesis-hash (AppendTo .additional-data) (AppendTo .additional-data) ; twice

  .call-data >= .signed-payload
  .extra-data (AppendTo .signed-payload)
  .additional-data (AppendTo .signed-payload)
  (Count .signed-payload)
  (If (IsMore 256)
      (-> (Msg "LONG PAYLOAD") .signed-payload (Hash.Blake2-256))
      (-> .signed-payload)) ; use hashed version if longer bigger than 256
  (Sr25519.Sign .private-key) (Log "Signature bytes") >= .signature
  ; add enum index 1
  "0x01" (HexToBytes) (PrependTo .signature)
  .signature (ToHex) (Log "Signature")

  [0x84] (Substrate.Encode ["u8"]) >= .rpc-data
  .signer (AppendTo .rpc-data)
  .signature (AppendTo .rpc-data)
  .extra-data (AppendTo .rpc-data)
  .call-data (AppendTo .rpc-data)
  [.rpc-data] (Substrate.Encode [nil]) (ToHex) (Log "rpc hex") = .rpc-data-hex
  {"id" 1 "jsonrpc" "2.0" "method" "author_submitAndWatchExtrinsic" "params" [.rpc-data-hex]} (ToJson) 
  (WebSocket.WriteString .ws-client)
  (WebSocket.ReadString .ws-client)
  (Log "Sub")
  (WebSocket.ReadString .ws-client)
  (Log "Next")
  (Repeat (-> (WebSocket.ReadString .ws-client) (Log)) :Times 20)
  ;; {"id" 1 "jsonrpc" "2.0" "method" "chain_subscribeAllHeads"} (ToJson)
  ;; (WebSocket.WriteString .ws-client)
  ;; (WebSocket.ReadString .ws-client)
  
  (FromJson))
